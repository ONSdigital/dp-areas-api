// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-areas-api/pgx"
	"github.com/jackc/pgx/v4/pgxpool"
	"sync"
)

// Ensure, that PGXPoolMock does implement pgx.PGXPool.
// If this is not the case, regenerate this file with moq.
var _ pgx.PGXPool = &PGXPoolMock{}

// PGXPoolMock is a mock implementation of pgx.PGXPool.
//
// 	func TestSomethingThatUsesPGXPool(t *testing.T) {
//
// 		// make and configure a mocked pgx.PGXPool
// 		mockedPGXPool := &PGXPoolMock{
// 			CloseFunc: func()  {
// 				panic("mock out the Close method")
// 			},
// 			ConnectFunc: func(ctx context.Context, connString string) (*pgxpool.Pool, error) {
// 				panic("mock out the Connect method")
// 			},
// 		}
//
// 		// use mockedPGXPool in code that requires pgx.PGXPool
// 		// and then make assertions.
//
// 	}
type PGXPoolMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func()

	// ConnectFunc mocks the Connect method.
	ConnectFunc func(ctx context.Context, connString string) (*pgxpool.Pool, error)

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// Connect holds details about calls to the Connect method.
		Connect []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnString is the connString argument value.
			ConnString string
		}
	}
	lockClose   sync.RWMutex
	lockConnect sync.RWMutex
}

// Close calls CloseFunc.
func (mock *PGXPoolMock) Close() {
	if mock.CloseFunc == nil {
		panic("PGXPoolMock.CloseFunc: method is nil but PGXPool.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedPGXPool.CloseCalls())
func (mock *PGXPoolMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// Connect calls ConnectFunc.
func (mock *PGXPoolMock) Connect(ctx context.Context, connString string) (*pgxpool.Pool, error) {
	if mock.ConnectFunc == nil {
		panic("PGXPoolMock.ConnectFunc: method is nil but PGXPool.Connect was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ConnString string
	}{
		Ctx:        ctx,
		ConnString: connString,
	}
	mock.lockConnect.Lock()
	mock.calls.Connect = append(mock.calls.Connect, callInfo)
	mock.lockConnect.Unlock()
	return mock.ConnectFunc(ctx, connString)
}

// ConnectCalls gets all the calls that were made to Connect.
// Check the length with:
//     len(mockedPGXPool.ConnectCalls())
func (mock *PGXPoolMock) ConnectCalls() []struct {
	Ctx        context.Context
	ConnString string
} {
	var calls []struct {
		Ctx        context.Context
		ConnString string
	}
	mock.lockConnect.RLock()
	calls = mock.calls.Connect
	mock.lockConnect.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	pgx "github.com/ONSdigital/dp-areas-api/pgx"
	"github.com/jackc/pgconn"
	v4 "github.com/jackc/pgx/v4"
	"sync"
)

// Ensure, that PGXPoolMock does implement pgx.PGXPool.
// If this is not the case, regenerate this file with moq.
var _ pgx.PGXPool = &PGXPoolMock{}

// PGXPoolMock is a mock implementation of pgx.PGXPool.
//
// 	func TestSomethingThatUsesPGXPool(t *testing.T) {
//
// 		// make and configure a mocked pgx.PGXPool
// 		mockedPGXPool := &PGXPoolMock{
// 			BeginFunc: func(ctx context.Context) (v4.Tx, error) {
// 				panic("mock out the Begin method")
// 			},
// 			CloseFunc: func()  {
// 				panic("mock out the Close method")
// 			},
// 			ExecFunc: func(ctx context.Context, sql string, arguments ...interface{}) (pgconn.CommandTag, error) {
// 				panic("mock out the Exec method")
// 			},
// 			PingFunc: func(ctx context.Context) error {
// 				panic("mock out the Ping method")
// 			},
// 			QueryFunc: func(ctx context.Context, sql string, args ...interface{}) (v4.Rows, error) {
// 				panic("mock out the Query method")
// 			},
// 			QueryRowFunc: func(ctx context.Context, sql string, args ...interface{}) v4.Row {
// 				panic("mock out the QueryRow method")
// 			},
// 		}
//
// 		// use mockedPGXPool in code that requires pgx.PGXPool
// 		// and then make assertions.
//
// 	}
type PGXPoolMock struct {
	// BeginFunc mocks the Begin method.
	BeginFunc func(ctx context.Context) (v4.Tx, error)

	// CloseFunc mocks the Close method.
	CloseFunc func()

	// ExecFunc mocks the Exec method.
	ExecFunc func(ctx context.Context, sql string, arguments ...interface{}) (pgconn.CommandTag, error)

	// PingFunc mocks the Ping method.
	PingFunc func(ctx context.Context) error

	// QueryFunc mocks the Query method.
	QueryFunc func(ctx context.Context, sql string, args ...interface{}) (v4.Rows, error)

	// QueryRowFunc mocks the QueryRow method.
	QueryRowFunc func(ctx context.Context, sql string, args ...interface{}) v4.Row

	// calls tracks calls to the methods.
	calls struct {
		// Begin holds details about calls to the Begin method.
		Begin []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// Exec holds details about calls to the Exec method.
		Exec []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SQL is the sql argument value.
			SQL string
			// Arguments is the arguments argument value.
			Arguments []interface{}
		}
		// Ping holds details about calls to the Ping method.
		Ping []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Query holds details about calls to the Query method.
		Query []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SQL is the sql argument value.
			SQL string
			// Args is the args argument value.
			Args []interface{}
		}
		// QueryRow holds details about calls to the QueryRow method.
		QueryRow []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SQL is the sql argument value.
			SQL string
			// Args is the args argument value.
			Args []interface{}
		}
	}
	lockBegin    sync.RWMutex
	lockClose    sync.RWMutex
	lockExec     sync.RWMutex
	lockPing     sync.RWMutex
	lockQuery    sync.RWMutex
	lockQueryRow sync.RWMutex
}

// Begin calls BeginFunc.
func (mock *PGXPoolMock) Begin(ctx context.Context) (v4.Tx, error) {
	if mock.BeginFunc == nil {
		panic("PGXPoolMock.BeginMock: method is nil but PGXPool.Begin was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockBegin.Lock()
	mock.calls.Begin = append(mock.calls.Begin, callInfo)
	mock.lockBegin.Unlock()
	return mock.BeginFunc(ctx)
}

// BeginCalls gets all the calls that were made to Begin.
// Check the length with:
//     len(mockedPGXPool.BeginCalls())
func (mock *PGXPoolMock) BeginCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockBegin.RLock()
	calls = mock.calls.Begin
	mock.lockBegin.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *PGXPoolMock) Close() {
	if mock.CloseFunc == nil {
		panic("PGXPoolMock.CloseFunc: method is nil but PGXPool.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedPGXPool.CloseCalls())
func (mock *PGXPoolMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// Exec calls ExecFunc.
func (mock *PGXPoolMock) Exec(ctx context.Context, sql string, arguments ...interface{}) (pgconn.CommandTag, error) {
	if mock.ExecFunc == nil {
		panic("PGXPoolMock.ExecFunc: method is nil but PGXPool.Exec was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		SQL       string
		Arguments []interface{}
	}{
		Ctx:       ctx,
		SQL:       sql,
		Arguments: arguments,
	}
	mock.lockExec.Lock()
	mock.calls.Exec = append(mock.calls.Exec, callInfo)
	mock.lockExec.Unlock()
	return mock.ExecFunc(ctx, sql, arguments...)
}

// ExecCalls gets all the calls that were made to Exec.
// Check the length with:
//     len(mockedPGXPool.ExecCalls())
func (mock *PGXPoolMock) ExecCalls() []struct {
	Ctx       context.Context
	SQL       string
	Arguments []interface{}
} {
	var calls []struct {
		Ctx       context.Context
		SQL       string
		Arguments []interface{}
	}
	mock.lockExec.RLock()
	calls = mock.calls.Exec
	mock.lockExec.RUnlock()
	return calls
}

// Ping calls PingFunc.
func (mock *PGXPoolMock) Ping(ctx context.Context) error {
	if mock.PingFunc == nil {
		panic("PGXPoolMock.PingFunc: method is nil but PGXPool.Ping was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockPing.Lock()
	mock.calls.Ping = append(mock.calls.Ping, callInfo)
	mock.lockPing.Unlock()
	return mock.PingFunc(ctx)
}

// PingCalls gets all the calls that were made to Ping.
// Check the length with:
//     len(mockedPGXPool.PingCalls())
func (mock *PGXPoolMock) PingCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockPing.RLock()
	calls = mock.calls.Ping
	mock.lockPing.RUnlock()
	return calls
}

// Query calls QueryFunc.
func (mock *PGXPoolMock) Query(ctx context.Context, sql string, args ...interface{}) (v4.Rows, error) {
	if mock.QueryFunc == nil {
		panic("PGXPoolMock.QueryFunc: method is nil but PGXPool.Query was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		SQL  string
		Args []interface{}
	}{
		Ctx:  ctx,
		SQL:  sql,
		Args: args,
	}
	mock.lockQuery.Lock()
	mock.calls.Query = append(mock.calls.Query, callInfo)
	mock.lockQuery.Unlock()
	return mock.QueryFunc(ctx, sql, args...)
}

// QueryCalls gets all the calls that were made to Query.
// Check the length with:
//     len(mockedPGXPool.QueryCalls())
func (mock *PGXPoolMock) QueryCalls() []struct {
	Ctx  context.Context
	SQL  string
	Args []interface{}
} {
	var calls []struct {
		Ctx  context.Context
		SQL  string
		Args []interface{}
	}
	mock.lockQuery.RLock()
	calls = mock.calls.Query
	mock.lockQuery.RUnlock()
	return calls
}

// QueryRow calls QueryRowFunc.
func (mock *PGXPoolMock) QueryRow(ctx context.Context, sql string, args ...interface{}) v4.Row {
	if mock.QueryRowFunc == nil {
		panic("PGXPoolMock.QueryRowFunc: method is nil but PGXPool.QueryRow was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		SQL  string
		Args []interface{}
	}{
		Ctx:  ctx,
		SQL:  sql,
		Args: args,
	}
	mock.lockQueryRow.Lock()
	mock.calls.QueryRow = append(mock.calls.QueryRow, callInfo)
	mock.lockQueryRow.Unlock()
	return mock.QueryRowFunc(ctx, sql, args...)
}

// QueryRowCalls gets all the calls that were made to QueryRow.
// Check the length with:
//     len(mockedPGXPool.QueryRowCalls())
func (mock *PGXPoolMock) QueryRowCalls() []struct {
	Ctx  context.Context
	SQL  string
	Args []interface{}
} {
	var calls []struct {
		Ctx  context.Context
		SQL  string
		Args []interface{}
	}
	mock.lockQueryRow.RLock()
	calls = mock.calls.QueryRow
	mock.lockQueryRow.RUnlock()
	return calls
}

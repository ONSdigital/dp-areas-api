// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-areas-api/api"
	"github.com/ONSdigital/dp-areas-api/models"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"sync"
)

// Ensure, that AreaStoreMock does implement api.AreaStore.
// If this is not the case, regenerate this file with moq.
var _ api.AreaStore = &AreaStoreMock{}

// AreaStoreMock is a mock implementation of api.AreaStore.
//
//     func TestSomethingThatUsesAreaStore(t *testing.T) {
//
//         // make and configure a mocked api.AreaStore
//         mockedAreaStore := &AreaStoreMock{
//             CheckAreaExistsFunc: func(id string) error {
// 	               panic("mock out the CheckAreaExists method")
//             },
//             CheckerFunc: func(in1 context.Context, in2 *healthcheck.CheckState) error {
// 	               panic("mock out the Checker method")
//             },
//             CloseFunc: func(ctx context.Context) error {
// 	               panic("mock out the Close method")
//             },
//             GetAreaFunc: func(ctx context.Context, id string) (*models.Area, error) {
// 	               panic("mock out the GetArea method")
//             },
//             GetVersionFunc: func(id string, versionID int) (*models.Area, error) {
// 	               panic("mock out the GetVersion method")
//             },
//         }
//
//         // use mockedAreaStore in code that requires api.AreaStore
//         // and then make assertions.
//
//     }
type AreaStoreMock struct {
	// CheckAreaExistsFunc mocks the CheckAreaExists method.
	CheckAreaExistsFunc func(id string) error

	// CheckerFunc mocks the Checker method.
	CheckerFunc func(in1 context.Context, in2 *healthcheck.CheckState) error

	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context) error

	// GetAreaFunc mocks the GetArea method.
	GetAreaFunc func(ctx context.Context, id string) (*models.Area, error)

	// GetVersionFunc mocks the GetVersion method.
	GetVersionFunc func(id string, versionID int) (*models.Area, error)

	// calls tracks calls to the methods.
	calls struct {
		// CheckAreaExists holds details about calls to the CheckAreaExists method.
		CheckAreaExists []struct {
			// ID is the id argument value.
			ID string
		}
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *healthcheck.CheckState
		}
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetArea holds details about calls to the GetArea method.
		GetArea []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetVersion holds details about calls to the GetVersion method.
		GetVersion []struct {
			// ID is the id argument value.
			ID string
			// VersionID is the versionID argument value.
			VersionID int
		}
	}
	lockCheckAreaExists sync.RWMutex
	lockChecker         sync.RWMutex
	lockClose           sync.RWMutex
	lockGetArea         sync.RWMutex
	lockGetVersion      sync.RWMutex
}

// CheckAreaExists calls CheckAreaExistsFunc.
func (mock *AreaStoreMock) CheckAreaExists(id string) error {
	if mock.CheckAreaExistsFunc == nil {
		panic("AreaStoreMock.CheckAreaExistsFunc: method is nil but AreaStore.CheckAreaExists was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockCheckAreaExists.Lock()
	mock.calls.CheckAreaExists = append(mock.calls.CheckAreaExists, callInfo)
	mock.lockCheckAreaExists.Unlock()
	return mock.CheckAreaExistsFunc(id)
}

// CheckAreaExistsCalls gets all the calls that were made to CheckAreaExists.
// Check the length with:
//     len(mockedAreaStore.CheckAreaExistsCalls())
func (mock *AreaStoreMock) CheckAreaExistsCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockCheckAreaExists.RLock()
	calls = mock.calls.CheckAreaExists
	mock.lockCheckAreaExists.RUnlock()
	return calls
}

// Checker calls CheckerFunc.
func (mock *AreaStoreMock) Checker(in1 context.Context, in2 *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("AreaStoreMock.CheckerFunc: method is nil but AreaStore.Checker was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *healthcheck.CheckState
	}{
		In1: in1,
		In2: in2,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(in1, in2)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedAreaStore.CheckerCalls())
func (mock *AreaStoreMock) CheckerCalls() []struct {
	In1 context.Context
	In2 *healthcheck.CheckState
} {
	var calls []struct {
		In1 context.Context
		In2 *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *AreaStoreMock) Close(ctx context.Context) error {
	if mock.CloseFunc == nil {
		panic("AreaStoreMock.CloseFunc: method is nil but AreaStore.Close was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc(ctx)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedAreaStore.CloseCalls())
func (mock *AreaStoreMock) CloseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// GetArea calls GetAreaFunc.
func (mock *AreaStoreMock) GetArea(ctx context.Context, id string) (*models.Area, error) {
	if mock.GetAreaFunc == nil {
		panic("AreaStoreMock.GetAreaFunc: method is nil but AreaStore.GetArea was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetArea.Lock()
	mock.calls.GetArea = append(mock.calls.GetArea, callInfo)
	mock.lockGetArea.Unlock()
	return mock.GetAreaFunc(ctx, id)
}

// GetAreaCalls gets all the calls that were made to GetArea.
// Check the length with:
//     len(mockedAreaStore.GetAreaCalls())
func (mock *AreaStoreMock) GetAreaCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetArea.RLock()
	calls = mock.calls.GetArea
	mock.lockGetArea.RUnlock()
	return calls
}

// GetVersion calls GetVersionFunc.
func (mock *AreaStoreMock) GetVersion(id string, versionID int) (*models.Area, error) {
	if mock.GetVersionFunc == nil {
		panic("AreaStoreMock.GetVersionFunc: method is nil but AreaStore.GetVersion was just called")
	}
	callInfo := struct {
		ID        string
		VersionID int
	}{
		ID:        id,
		VersionID: versionID,
	}
	mock.lockGetVersion.Lock()
	mock.calls.GetVersion = append(mock.calls.GetVersion, callInfo)
	mock.lockGetVersion.Unlock()
	return mock.GetVersionFunc(id, versionID)
}

// GetVersionCalls gets all the calls that were made to GetVersion.
// Check the length with:
//     len(mockedAreaStore.GetVersionCalls())
func (mock *AreaStoreMock) GetVersionCalls() []struct {
	ID        string
	VersionID int
} {
	var calls []struct {
		ID        string
		VersionID int
	}
	mock.lockGetVersion.RLock()
	calls = mock.calls.GetVersion
	mock.lockGetVersion.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-areas-api/api"
	"github.com/ONSdigital/dp-areas-api/config"
	"github.com/ONSdigital/dp-areas-api/models"
	"sync"
)

// Ensure, that RDSAreaStoreMock does implement api.RDSAreaStore.
// If this is not the case, regenerate this file with moq.
var _ api.RDSAreaStore = &RDSAreaStoreMock{}

// RDSAreaStoreMock is a mock implementation of api.RDSAreaStore.
//
// 	func TestSomethingThatUsesRDSAreaStore(t *testing.T) {
//
// 		// make and configure a mocked api.RDSAreaStore
// 		mockedRDSAreaStore := &RDSAreaStoreMock{
// 			BuildTablesFunc: func(ctx context.Context, executionList []string) error {
// 				panic("mock out the BuildTables method")
// 			},
// 			CloseFunc: func()  {
// 				panic("mock out the Close method")
// 			},
// 			GetAncestorsFunc: func(areaID string) ([]models.AreasAncestors, error) {
// 				panic("mock out the GetAncestors method")
// 			},
// 			GetAreaFunc: func(ctx context.Context, areaId string) (*models.AreasDataResults, error) {
// 				panic("mock out the GetArea method")
// 			},
// 			GetRelationshipsFunc: func(areaCode string, relationshipParameter string) ([]*models.AreaBasicData, error) {
// 				panic("mock out the GetRelationships method")
// 			},
// 			InitFunc: func(ctx context.Context, cfg *config.Config) error {
// 				panic("mock out the Init method")
// 			},
// 			PingFunc: func(ctx context.Context) error {
// 				panic("mock out the Ping method")
// 			},
// 			UpsertAreaFunc: func(ctx context.Context, area models.AreaParams) (bool, error) {
// 				panic("mock out the UpsertArea method")
// 			},
// 			ValidateAreaFunc: func(code string) error {
// 				panic("mock out the ValidateArea method")
// 			},
// 		}
//
// 		// use mockedRDSAreaStore in code that requires api.RDSAreaStore
// 		// and then make assertions.
//
// 	}
type RDSAreaStoreMock struct {
	// BuildTablesFunc mocks the BuildTables method.
	BuildTablesFunc func(ctx context.Context, executionList []string) error

	// CloseFunc mocks the Close method.
	CloseFunc func()

	// GetAncestorsFunc mocks the GetAncestors method.
	GetAncestorsFunc func(areaID string) ([]models.AreasAncestors, error)

	// GetAreaFunc mocks the GetArea method.
	GetAreaFunc func(ctx context.Context, areaId string) (*models.AreasDataResults, error)

	// GetRelationshipsFunc mocks the GetRelationships method.
	GetRelationshipsFunc func(areaCode string, relationshipParameter string) ([]*models.AreaBasicData, error)

	// InitFunc mocks the Init method.
	InitFunc func(ctx context.Context, cfg *config.Config) error

	// PingFunc mocks the Ping method.
	PingFunc func(ctx context.Context) error

	// UpsertAreaFunc mocks the UpsertArea method.
	UpsertAreaFunc func(ctx context.Context, area models.AreaParams) (bool, error)

	// ValidateAreaFunc mocks the ValidateArea method.
	ValidateAreaFunc func(code string) error

	// calls tracks calls to the methods.
	calls struct {
		// BuildTables holds details about calls to the BuildTables method.
		BuildTables []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ExecutionList is the executionList argument value.
			ExecutionList []string
		}
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// GetAncestors holds details about calls to the GetAncestors method.
		GetAncestors []struct {
			// AreaID is the areaID argument value.
			AreaID string
		}
		// GetArea holds details about calls to the GetArea method.
		GetArea []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AreaId is the areaId argument value.
			AreaId string
		}
		// GetRelationships holds details about calls to the GetRelationships method.
		GetRelationships []struct {
			// AreaCode is the areaCode argument value.
			AreaCode string
			// RelationshipParameter is the relationshipParameter argument value.
			RelationshipParameter string
		}
		// Init holds details about calls to the Init method.
		Init []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cfg is the cfg argument value.
			Cfg *config.Config
		}
		// Ping holds details about calls to the Ping method.
		Ping []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// UpsertArea holds details about calls to the UpsertArea method.
		UpsertArea []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Area is the area argument value.
			Area models.AreaParams
		}
		// ValidateArea holds details about calls to the ValidateArea method.
		ValidateArea []struct {
			// Code is the code argument value.
			Code string
		}
	}
	lockBuildTables      sync.RWMutex
	lockClose            sync.RWMutex
	lockGetAncestors     sync.RWMutex
	lockGetArea          sync.RWMutex
	lockGetRelationships sync.RWMutex
	lockInit             sync.RWMutex
	lockPing             sync.RWMutex
	lockUpsertArea       sync.RWMutex
	lockValidateArea     sync.RWMutex
}

// BuildTables calls BuildTablesFunc.
func (mock *RDSAreaStoreMock) BuildTables(ctx context.Context, executionList []string) error {
	if mock.BuildTablesFunc == nil {
		panic("RDSAreaStoreMock.BuildTablesFunc: method is nil but RDSAreaStore.BuildTables was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ExecutionList []string
	}{
		Ctx:           ctx,
		ExecutionList: executionList,
	}
	mock.lockBuildTables.Lock()
	mock.calls.BuildTables = append(mock.calls.BuildTables, callInfo)
	mock.lockBuildTables.Unlock()
	return mock.BuildTablesFunc(ctx, executionList)
}

// BuildTablesCalls gets all the calls that were made to BuildTables.
// Check the length with:
//     len(mockedRDSAreaStore.BuildTablesCalls())
func (mock *RDSAreaStoreMock) BuildTablesCalls() []struct {
	Ctx           context.Context
	ExecutionList []string
} {
	var calls []struct {
		Ctx           context.Context
		ExecutionList []string
	}
	mock.lockBuildTables.RLock()
	calls = mock.calls.BuildTables
	mock.lockBuildTables.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *RDSAreaStoreMock) Close() {
	if mock.CloseFunc == nil {
		panic("RDSAreaStoreMock.CloseFunc: method is nil but RDSAreaStore.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedRDSAreaStore.CloseCalls())
func (mock *RDSAreaStoreMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// GetAncestors calls GetAncestorsFunc.
func (mock *RDSAreaStoreMock) GetAncestors(areaID string) ([]models.AreasAncestors, error) {
	if mock.GetAncestorsFunc == nil {
		panic("RDSAreaStoreMock.GetAncestorsFunc: method is nil but RDSAreaStore.GetAncestors was just called")
	}
	callInfo := struct {
		AreaID string
	}{
		AreaID: areaID,
	}
	mock.lockGetAncestors.Lock()
	mock.calls.GetAncestors = append(mock.calls.GetAncestors, callInfo)
	mock.lockGetAncestors.Unlock()
	return mock.GetAncestorsFunc(areaID)
}

// GetAncestorsCalls gets all the calls that were made to GetAncestors.
// Check the length with:
//     len(mockedRDSAreaStore.GetAncestorsCalls())
func (mock *RDSAreaStoreMock) GetAncestorsCalls() []struct {
	AreaID string
} {
	var calls []struct {
		AreaID string
	}
	mock.lockGetAncestors.RLock()
	calls = mock.calls.GetAncestors
	mock.lockGetAncestors.RUnlock()
	return calls
}

// GetArea calls GetAreaFunc.
func (mock *RDSAreaStoreMock) GetArea(ctx context.Context, areaId string) (*models.AreasDataResults, error) {
	if mock.GetAreaFunc == nil {
		panic("RDSAreaStoreMock.GetAreaFunc: method is nil but RDSAreaStore.GetArea was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		AreaId string
	}{
		Ctx:    ctx,
		AreaId: areaId,
	}
	mock.lockGetArea.Lock()
	mock.calls.GetArea = append(mock.calls.GetArea, callInfo)
	mock.lockGetArea.Unlock()
	return mock.GetAreaFunc(ctx, areaId)
}

// GetAreaCalls gets all the calls that were made to GetArea.
// Check the length with:
//     len(mockedRDSAreaStore.GetAreaCalls())
func (mock *RDSAreaStoreMock) GetAreaCalls() []struct {
	Ctx    context.Context
	AreaId string
} {
	var calls []struct {
		Ctx    context.Context
		AreaId string
	}
	mock.lockGetArea.RLock()
	calls = mock.calls.GetArea
	mock.lockGetArea.RUnlock()
	return calls
}

// GetRelationships calls GetRelationshipsFunc.
func (mock *RDSAreaStoreMock) GetRelationships(areaCode string, relationshipParameter string) ([]*models.AreaBasicData, error) {
	if mock.GetRelationshipsFunc == nil {
		panic("RDSAreaStoreMock.GetRelationshipsFunc: method is nil but RDSAreaStore.GetRelationships was just called")
	}
	callInfo := struct {
		AreaCode              string
		RelationshipParameter string
	}{
		AreaCode:              areaCode,
		RelationshipParameter: relationshipParameter,
	}
	mock.lockGetRelationships.Lock()
	mock.calls.GetRelationships = append(mock.calls.GetRelationships, callInfo)
	mock.lockGetRelationships.Unlock()
	return mock.GetRelationshipsFunc(areaCode, relationshipParameter)
}

// GetRelationshipsCalls gets all the calls that were made to GetRelationships.
// Check the length with:
//     len(mockedRDSAreaStore.GetRelationshipsCalls())
func (mock *RDSAreaStoreMock) GetRelationshipsCalls() []struct {
	AreaCode              string
	RelationshipParameter string
} {
	var calls []struct {
		AreaCode              string
		RelationshipParameter string
	}
	mock.lockGetRelationships.RLock()
	calls = mock.calls.GetRelationships
	mock.lockGetRelationships.RUnlock()
	return calls
}

// Init calls InitFunc.
func (mock *RDSAreaStoreMock) Init(ctx context.Context, cfg *config.Config) error {
	if mock.InitFunc == nil {
		panic("RDSAreaStoreMock.InitFunc: method is nil but RDSAreaStore.Init was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Cfg *config.Config
	}{
		Ctx: ctx,
		Cfg: cfg,
	}
	mock.lockInit.Lock()
	mock.calls.Init = append(mock.calls.Init, callInfo)
	mock.lockInit.Unlock()
	return mock.InitFunc(ctx, cfg)
}

// InitCalls gets all the calls that were made to Init.
// Check the length with:
//     len(mockedRDSAreaStore.InitCalls())
func (mock *RDSAreaStoreMock) InitCalls() []struct {
	Ctx context.Context
	Cfg *config.Config
} {
	var calls []struct {
		Ctx context.Context
		Cfg *config.Config
	}
	mock.lockInit.RLock()
	calls = mock.calls.Init
	mock.lockInit.RUnlock()
	return calls
}

// Ping calls PingFunc.
func (mock *RDSAreaStoreMock) Ping(ctx context.Context) error {
	if mock.PingFunc == nil {
		panic("RDSAreaStoreMock.PingFunc: method is nil but RDSAreaStore.Ping was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockPing.Lock()
	mock.calls.Ping = append(mock.calls.Ping, callInfo)
	mock.lockPing.Unlock()
	return mock.PingFunc(ctx)
}

// PingCalls gets all the calls that were made to Ping.
// Check the length with:
//     len(mockedRDSAreaStore.PingCalls())
func (mock *RDSAreaStoreMock) PingCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockPing.RLock()
	calls = mock.calls.Ping
	mock.lockPing.RUnlock()
	return calls
}

// UpsertArea calls UpsertAreaFunc.
func (mock *RDSAreaStoreMock) UpsertArea(ctx context.Context, area models.AreaParams) (bool, error) {
	if mock.UpsertAreaFunc == nil {
		panic("RDSAreaStoreMock.UpsertAreaFunc: method is nil but RDSAreaStore.UpsertArea was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Area models.AreaParams
	}{
		Ctx:  ctx,
		Area: area,
	}
	mock.lockUpsertArea.Lock()
	mock.calls.UpsertArea = append(mock.calls.UpsertArea, callInfo)
	mock.lockUpsertArea.Unlock()
	return mock.UpsertAreaFunc(ctx, area)
}

// UpsertAreaCalls gets all the calls that were made to UpsertArea.
// Check the length with:
//     len(mockedRDSAreaStore.UpsertAreaCalls())
func (mock *RDSAreaStoreMock) UpsertAreaCalls() []struct {
	Ctx  context.Context
	Area models.AreaParams
} {
	var calls []struct {
		Ctx  context.Context
		Area models.AreaParams
	}
	mock.lockUpsertArea.RLock()
	calls = mock.calls.UpsertArea
	mock.lockUpsertArea.RUnlock()
	return calls
}

// ValidateArea calls ValidateAreaFunc.
func (mock *RDSAreaStoreMock) ValidateArea(code string) error {
	if mock.ValidateAreaFunc == nil {
		panic("RDSAreaStoreMock.ValidateAreaFunc: method is nil but RDSAreaStore.ValidateArea was just called")
	}
	callInfo := struct {
		Code string
	}{
		Code: code,
	}
	mock.lockValidateArea.Lock()
	mock.calls.ValidateArea = append(mock.calls.ValidateArea, callInfo)
	mock.lockValidateArea.Unlock()
	return mock.ValidateAreaFunc(code)
}

// ValidateAreaCalls gets all the calls that were made to ValidateArea.
// Check the length with:
//     len(mockedRDSAreaStore.ValidateAreaCalls())
func (mock *RDSAreaStoreMock) ValidateAreaCalls() []struct {
	Code string
} {
	var calls []struct {
		Code string
	}
	mock.lockValidateArea.RLock()
	calls = mock.calls.ValidateArea
	mock.lockValidateArea.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ONSdigital/dp-areas-api/api"
	"github.com/ONSdigital/dp-areas-api/models"
	"sync"
)

// Ensure, that AncestorStoreMock does implement api.AncestorStore.
// If this is not the case, regenerate this file with moq.
var _ api.AncestorStore = &AncestorStoreMock{}

// AncestorStoreMock is a mock implementation of api.AncestorStore.
//
// 	func TestSomethingThatUsesAncestorStore(t *testing.T) {
//
// 		// make and configure a mocked api.AncestorStore
// 		mockedAncestorStore := &AncestorStoreMock{
// 			GetAncestorsFunc: func(areaID string) ([]*models.AreasAncestors, error) {
// 				panic("mock out the GetAncestors method")
// 			},
// 		}
//
// 		// use mockedAncestorStore in code that requires api.AncestorStore
// 		// and then make assertions.
//
// 	}
type AncestorStoreMock struct {
	// GetAncestorsFunc mocks the GetAncestors method.
	GetAncestorsFunc func(areaID string) ([]*models.AreasAncestors, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAncestors holds details about calls to the GetAncestors method.
		GetAncestors []struct {
			// AreaID is the areaID argument value.
			AreaID string
		}
	}
	lockGetAncestors sync.RWMutex
}

// GetAncestors calls GetAncestorsFunc.
func (mock *AncestorStoreMock) GetAncestors(areaID string) ([]*models.AreasAncestors, error) {
	if mock.GetAncestorsFunc == nil {
		panic("AncestorStoreMock.GetAncestorsFunc: method is nil but AncestorStore.GetAncestors was just called")
	}
	callInfo := struct {
		AreaID string
	}{
		AreaID: areaID,
	}
	mock.lockGetAncestors.Lock()
	mock.calls.GetAncestors = append(mock.calls.GetAncestors, callInfo)
	mock.lockGetAncestors.Unlock()
	return mock.GetAncestorsFunc(areaID)
}

// GetAncestorsCalls gets all the calls that were made to GetAncestors.
// Check the length with:
//     len(mockedAncestorStore.GetAncestorsCalls())
func (mock *AncestorStoreMock) GetAncestorsCalls() []struct {
	AreaID string
} {
	var calls []struct {
		AreaID string
	}
	mock.lockGetAncestors.RLock()
	calls = mock.calls.GetAncestors
	mock.lockGetAncestors.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/ONSdigital/dp-api-clients-go/v2/health"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/ONSdigital/dp-topic-api/models"
	"github.com/ONSdigital/dp-topic-api/sdk"
	"github.com/ONSdigital/dp-topic-api/sdk/errors"
	"sync"
)

var (
	lockClienterMockChecker                sync.RWMutex
	lockClienterMockGetNavigationPublic    sync.RWMutex
	lockClienterMockGetRootTopicsPrivate   sync.RWMutex
	lockClienterMockGetRootTopicsPublic    sync.RWMutex
	lockClienterMockGetSubtopicsPrivate    sync.RWMutex
	lockClienterMockGetSubtopicsPublic     sync.RWMutex
	lockClienterMockGetTopicPrivate        sync.RWMutex
	lockClienterMockGetTopicPublic         sync.RWMutex
	lockClienterMockHealth                 sync.RWMutex
	lockClienterMockPutTopicReleasePrivate sync.RWMutex
	lockClienterMockURL                    sync.RWMutex
)

// Ensure, that ClienterMock does implement sdk.Clienter.
// If this is not the case, regenerate this file with moq.
var _ sdk.Clienter = &ClienterMock{}

// ClienterMock is a mock implementation of sdk.Clienter.
//
//     func TestSomethingThatUsesClienter(t *testing.T) {
//
//         // make and configure a mocked sdk.Clienter
//         mockedClienter := &ClienterMock{
//             CheckerFunc: func(ctx context.Context, check *healthcheck.CheckState) error {
// 	               panic("mock out the Checker method")
//             },
//             GetNavigationPublicFunc: func(ctx context.Context, reqHeaders sdk.Headers, options sdk.Options) (*models.Navigation, errors.Error) {
// 	               panic("mock out the GetNavigationPublic method")
//             },
//             GetRootTopicsPrivateFunc: func(ctx context.Context, reqHeaders sdk.Headers) (*models.PrivateSubtopics, errors.Error) {
// 	               panic("mock out the GetRootTopicsPrivate method")
//             },
//             GetRootTopicsPublicFunc: func(ctx context.Context, reqHeaders sdk.Headers) (*models.PublicSubtopics, errors.Error) {
// 	               panic("mock out the GetRootTopicsPublic method")
//             },
//             GetSubtopicsPrivateFunc: func(ctx context.Context, reqHeaders sdk.Headers, id string) (*models.PrivateSubtopics, errors.Error) {
// 	               panic("mock out the GetSubtopicsPrivate method")
//             },
//             GetSubtopicsPublicFunc: func(ctx context.Context, reqHeaders sdk.Headers, id string) (*models.PublicSubtopics, errors.Error) {
// 	               panic("mock out the GetSubtopicsPublic method")
//             },
//             GetTopicPrivateFunc: func(ctx context.Context, reqHeaders sdk.Headers, id string) (*models.TopicResponse, errors.Error) {
// 	               panic("mock out the GetTopicPrivate method")
//             },
//             GetTopicPublicFunc: func(ctx context.Context, reqHeaders sdk.Headers, id string) (*models.Topic, errors.Error) {
// 	               panic("mock out the GetTopicPublic method")
//             },
//             HealthFunc: func() *health.Client {
// 	               panic("mock out the Health method")
//             },
//             PutTopicReleasePrivateFunc: func(ctx context.Context, reqHeaders sdk.Headers, id string, topicRelease []byte) (*sdk.ResponseInfo, errors.Error) {
// 	               panic("mock out the PutTopicReleasePrivate method")
//             },
//             URLFunc: func() string {
// 	               panic("mock out the URL method")
//             },
//         }
//
//         // use mockedClienter in code that requires sdk.Clienter
//         // and then make assertions.
//
//     }
type ClienterMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, check *healthcheck.CheckState) error

	// GetNavigationPublicFunc mocks the GetNavigationPublic method.
	GetNavigationPublicFunc func(ctx context.Context, reqHeaders sdk.Headers, options sdk.Options) (*models.Navigation, errors.Error)

	// GetRootTopicsPrivateFunc mocks the GetRootTopicsPrivate method.
	GetRootTopicsPrivateFunc func(ctx context.Context, reqHeaders sdk.Headers) (*models.PrivateSubtopics, errors.Error)

	// GetRootTopicsPublicFunc mocks the GetRootTopicsPublic method.
	GetRootTopicsPublicFunc func(ctx context.Context, reqHeaders sdk.Headers) (*models.PublicSubtopics, errors.Error)

	// GetSubtopicsPrivateFunc mocks the GetSubtopicsPrivate method.
	GetSubtopicsPrivateFunc func(ctx context.Context, reqHeaders sdk.Headers, id string) (*models.PrivateSubtopics, errors.Error)

	// GetSubtopicsPublicFunc mocks the GetSubtopicsPublic method.
	GetSubtopicsPublicFunc func(ctx context.Context, reqHeaders sdk.Headers, id string) (*models.PublicSubtopics, errors.Error)

	// GetTopicPrivateFunc mocks the GetTopicPrivate method.
	GetTopicPrivateFunc func(ctx context.Context, reqHeaders sdk.Headers, id string) (*models.TopicResponse, errors.Error)

	// GetTopicPublicFunc mocks the GetTopicPublic method.
	GetTopicPublicFunc func(ctx context.Context, reqHeaders sdk.Headers, id string) (*models.Topic, errors.Error)

	// HealthFunc mocks the Health method.
	HealthFunc func() *health.Client

	// PutTopicReleasePrivateFunc mocks the PutTopicReleasePrivate method.
	PutTopicReleasePrivateFunc func(ctx context.Context, reqHeaders sdk.Headers, id string, topicRelease []byte) (*sdk.ResponseInfo, errors.Error)

	// URLFunc mocks the URL method.
	URLFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Check is the check argument value.
			Check *healthcheck.CheckState
		}
		// GetNavigationPublic holds details about calls to the GetNavigationPublic method.
		GetNavigationPublic []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReqHeaders is the reqHeaders argument value.
			ReqHeaders sdk.Headers
			// Options is the options argument value.
			Options sdk.Options
		}
		// GetRootTopicsPrivate holds details about calls to the GetRootTopicsPrivate method.
		GetRootTopicsPrivate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReqHeaders is the reqHeaders argument value.
			ReqHeaders sdk.Headers
		}
		// GetRootTopicsPublic holds details about calls to the GetRootTopicsPublic method.
		GetRootTopicsPublic []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReqHeaders is the reqHeaders argument value.
			ReqHeaders sdk.Headers
		}
		// GetSubtopicsPrivate holds details about calls to the GetSubtopicsPrivate method.
		GetSubtopicsPrivate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReqHeaders is the reqHeaders argument value.
			ReqHeaders sdk.Headers
			// ID is the id argument value.
			ID string
		}
		// GetSubtopicsPublic holds details about calls to the GetSubtopicsPublic method.
		GetSubtopicsPublic []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReqHeaders is the reqHeaders argument value.
			ReqHeaders sdk.Headers
			// ID is the id argument value.
			ID string
		}
		// GetTopicPrivate holds details about calls to the GetTopicPrivate method.
		GetTopicPrivate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReqHeaders is the reqHeaders argument value.
			ReqHeaders sdk.Headers
			// ID is the id argument value.
			ID string
		}
		// GetTopicPublic holds details about calls to the GetTopicPublic method.
		GetTopicPublic []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReqHeaders is the reqHeaders argument value.
			ReqHeaders sdk.Headers
			// ID is the id argument value.
			ID string
		}
		// Health holds details about calls to the Health method.
		Health []struct {
		}
		// PutTopicReleasePrivate holds details about calls to the PutTopicReleasePrivate method.
		PutTopicReleasePrivate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReqHeaders is the reqHeaders argument value.
			ReqHeaders sdk.Headers
			// ID is the id argument value.
			ID string
			// TopicRelease is the topicRelease argument value.
			TopicRelease []byte
		}
		// URL holds details about calls to the URL method.
		URL []struct {
		}
	}
}

// Checker calls CheckerFunc.
func (mock *ClienterMock) Checker(ctx context.Context, check *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("ClienterMock.CheckerFunc: method is nil but Clienter.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Check *healthcheck.CheckState
	}{
		Ctx:   ctx,
		Check: check,
	}
	lockClienterMockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	lockClienterMockChecker.Unlock()
	return mock.CheckerFunc(ctx, check)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedClienter.CheckerCalls())
func (mock *ClienterMock) CheckerCalls() []struct {
	Ctx   context.Context
	Check *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		Check *healthcheck.CheckState
	}
	lockClienterMockChecker.RLock()
	calls = mock.calls.Checker
	lockClienterMockChecker.RUnlock()
	return calls
}

// GetNavigationPublic calls GetNavigationPublicFunc.
func (mock *ClienterMock) GetNavigationPublic(ctx context.Context, reqHeaders sdk.Headers, options sdk.Options) (*models.Navigation, errors.Error) {
	if mock.GetNavigationPublicFunc == nil {
		panic("ClienterMock.GetNavigationPublicFunc: method is nil but Clienter.GetNavigationPublic was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ReqHeaders sdk.Headers
		Options    sdk.Options
	}{
		Ctx:        ctx,
		ReqHeaders: reqHeaders,
		Options:    options,
	}
	lockClienterMockGetNavigationPublic.Lock()
	mock.calls.GetNavigationPublic = append(mock.calls.GetNavigationPublic, callInfo)
	lockClienterMockGetNavigationPublic.Unlock()
	return mock.GetNavigationPublicFunc(ctx, reqHeaders, options)
}

// GetNavigationPublicCalls gets all the calls that were made to GetNavigationPublic.
// Check the length with:
//     len(mockedClienter.GetNavigationPublicCalls())
func (mock *ClienterMock) GetNavigationPublicCalls() []struct {
	Ctx        context.Context
	ReqHeaders sdk.Headers
	Options    sdk.Options
} {
	var calls []struct {
		Ctx        context.Context
		ReqHeaders sdk.Headers
		Options    sdk.Options
	}
	lockClienterMockGetNavigationPublic.RLock()
	calls = mock.calls.GetNavigationPublic
	lockClienterMockGetNavigationPublic.RUnlock()
	return calls
}

// GetRootTopicsPrivate calls GetRootTopicsPrivateFunc.
func (mock *ClienterMock) GetRootTopicsPrivate(ctx context.Context, reqHeaders sdk.Headers) (*models.PrivateSubtopics, errors.Error) {
	if mock.GetRootTopicsPrivateFunc == nil {
		panic("ClienterMock.GetRootTopicsPrivateFunc: method is nil but Clienter.GetRootTopicsPrivate was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ReqHeaders sdk.Headers
	}{
		Ctx:        ctx,
		ReqHeaders: reqHeaders,
	}
	lockClienterMockGetRootTopicsPrivate.Lock()
	mock.calls.GetRootTopicsPrivate = append(mock.calls.GetRootTopicsPrivate, callInfo)
	lockClienterMockGetRootTopicsPrivate.Unlock()
	return mock.GetRootTopicsPrivateFunc(ctx, reqHeaders)
}

// GetRootTopicsPrivateCalls gets all the calls that were made to GetRootTopicsPrivate.
// Check the length with:
//     len(mockedClienter.GetRootTopicsPrivateCalls())
func (mock *ClienterMock) GetRootTopicsPrivateCalls() []struct {
	Ctx        context.Context
	ReqHeaders sdk.Headers
} {
	var calls []struct {
		Ctx        context.Context
		ReqHeaders sdk.Headers
	}
	lockClienterMockGetRootTopicsPrivate.RLock()
	calls = mock.calls.GetRootTopicsPrivate
	lockClienterMockGetRootTopicsPrivate.RUnlock()
	return calls
}

// GetRootTopicsPublic calls GetRootTopicsPublicFunc.
func (mock *ClienterMock) GetRootTopicsPublic(ctx context.Context, reqHeaders sdk.Headers) (*models.PublicSubtopics, errors.Error) {
	if mock.GetRootTopicsPublicFunc == nil {
		panic("ClienterMock.GetRootTopicsPublicFunc: method is nil but Clienter.GetRootTopicsPublic was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ReqHeaders sdk.Headers
	}{
		Ctx:        ctx,
		ReqHeaders: reqHeaders,
	}
	lockClienterMockGetRootTopicsPublic.Lock()
	mock.calls.GetRootTopicsPublic = append(mock.calls.GetRootTopicsPublic, callInfo)
	lockClienterMockGetRootTopicsPublic.Unlock()
	return mock.GetRootTopicsPublicFunc(ctx, reqHeaders)
}

// GetRootTopicsPublicCalls gets all the calls that were made to GetRootTopicsPublic.
// Check the length with:
//     len(mockedClienter.GetRootTopicsPublicCalls())
func (mock *ClienterMock) GetRootTopicsPublicCalls() []struct {
	Ctx        context.Context
	ReqHeaders sdk.Headers
} {
	var calls []struct {
		Ctx        context.Context
		ReqHeaders sdk.Headers
	}
	lockClienterMockGetRootTopicsPublic.RLock()
	calls = mock.calls.GetRootTopicsPublic
	lockClienterMockGetRootTopicsPublic.RUnlock()
	return calls
}

// GetSubtopicsPrivate calls GetSubtopicsPrivateFunc.
func (mock *ClienterMock) GetSubtopicsPrivate(ctx context.Context, reqHeaders sdk.Headers, id string) (*models.PrivateSubtopics, errors.Error) {
	if mock.GetSubtopicsPrivateFunc == nil {
		panic("ClienterMock.GetSubtopicsPrivateFunc: method is nil but Clienter.GetSubtopicsPrivate was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ReqHeaders sdk.Headers
		ID         string
	}{
		Ctx:        ctx,
		ReqHeaders: reqHeaders,
		ID:         id,
	}
	lockClienterMockGetSubtopicsPrivate.Lock()
	mock.calls.GetSubtopicsPrivate = append(mock.calls.GetSubtopicsPrivate, callInfo)
	lockClienterMockGetSubtopicsPrivate.Unlock()
	return mock.GetSubtopicsPrivateFunc(ctx, reqHeaders, id)
}

// GetSubtopicsPrivateCalls gets all the calls that were made to GetSubtopicsPrivate.
// Check the length with:
//     len(mockedClienter.GetSubtopicsPrivateCalls())
func (mock *ClienterMock) GetSubtopicsPrivateCalls() []struct {
	Ctx        context.Context
	ReqHeaders sdk.Headers
	ID         string
} {
	var calls []struct {
		Ctx        context.Context
		ReqHeaders sdk.Headers
		ID         string
	}
	lockClienterMockGetSubtopicsPrivate.RLock()
	calls = mock.calls.GetSubtopicsPrivate
	lockClienterMockGetSubtopicsPrivate.RUnlock()
	return calls
}

// GetSubtopicsPublic calls GetSubtopicsPublicFunc.
func (mock *ClienterMock) GetSubtopicsPublic(ctx context.Context, reqHeaders sdk.Headers, id string) (*models.PublicSubtopics, errors.Error) {
	if mock.GetSubtopicsPublicFunc == nil {
		panic("ClienterMock.GetSubtopicsPublicFunc: method is nil but Clienter.GetSubtopicsPublic was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ReqHeaders sdk.Headers
		ID         string
	}{
		Ctx:        ctx,
		ReqHeaders: reqHeaders,
		ID:         id,
	}
	lockClienterMockGetSubtopicsPublic.Lock()
	mock.calls.GetSubtopicsPublic = append(mock.calls.GetSubtopicsPublic, callInfo)
	lockClienterMockGetSubtopicsPublic.Unlock()
	return mock.GetSubtopicsPublicFunc(ctx, reqHeaders, id)
}

// GetSubtopicsPublicCalls gets all the calls that were made to GetSubtopicsPublic.
// Check the length with:
//     len(mockedClienter.GetSubtopicsPublicCalls())
func (mock *ClienterMock) GetSubtopicsPublicCalls() []struct {
	Ctx        context.Context
	ReqHeaders sdk.Headers
	ID         string
} {
	var calls []struct {
		Ctx        context.Context
		ReqHeaders sdk.Headers
		ID         string
	}
	lockClienterMockGetSubtopicsPublic.RLock()
	calls = mock.calls.GetSubtopicsPublic
	lockClienterMockGetSubtopicsPublic.RUnlock()
	return calls
}

// GetTopicPrivate calls GetTopicPrivateFunc.
func (mock *ClienterMock) GetTopicPrivate(ctx context.Context, reqHeaders sdk.Headers, id string) (*models.TopicResponse, errors.Error) {
	if mock.GetTopicPrivateFunc == nil {
		panic("ClienterMock.GetTopicPrivateFunc: method is nil but Clienter.GetTopicPrivate was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ReqHeaders sdk.Headers
		ID         string
	}{
		Ctx:        ctx,
		ReqHeaders: reqHeaders,
		ID:         id,
	}
	lockClienterMockGetTopicPrivate.Lock()
	mock.calls.GetTopicPrivate = append(mock.calls.GetTopicPrivate, callInfo)
	lockClienterMockGetTopicPrivate.Unlock()
	return mock.GetTopicPrivateFunc(ctx, reqHeaders, id)
}

// GetTopicPrivateCalls gets all the calls that were made to GetTopicPrivate.
// Check the length with:
//     len(mockedClienter.GetTopicPrivateCalls())
func (mock *ClienterMock) GetTopicPrivateCalls() []struct {
	Ctx        context.Context
	ReqHeaders sdk.Headers
	ID         string
} {
	var calls []struct {
		Ctx        context.Context
		ReqHeaders sdk.Headers
		ID         string
	}
	lockClienterMockGetTopicPrivate.RLock()
	calls = mock.calls.GetTopicPrivate
	lockClienterMockGetTopicPrivate.RUnlock()
	return calls
}

// GetTopicPublic calls GetTopicPublicFunc.
func (mock *ClienterMock) GetTopicPublic(ctx context.Context, reqHeaders sdk.Headers, id string) (*models.Topic, errors.Error) {
	if mock.GetTopicPublicFunc == nil {
		panic("ClienterMock.GetTopicPublicFunc: method is nil but Clienter.GetTopicPublic was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ReqHeaders sdk.Headers
		ID         string
	}{
		Ctx:        ctx,
		ReqHeaders: reqHeaders,
		ID:         id,
	}
	lockClienterMockGetTopicPublic.Lock()
	mock.calls.GetTopicPublic = append(mock.calls.GetTopicPublic, callInfo)
	lockClienterMockGetTopicPublic.Unlock()
	return mock.GetTopicPublicFunc(ctx, reqHeaders, id)
}

// GetTopicPublicCalls gets all the calls that were made to GetTopicPublic.
// Check the length with:
//     len(mockedClienter.GetTopicPublicCalls())
func (mock *ClienterMock) GetTopicPublicCalls() []struct {
	Ctx        context.Context
	ReqHeaders sdk.Headers
	ID         string
} {
	var calls []struct {
		Ctx        context.Context
		ReqHeaders sdk.Headers
		ID         string
	}
	lockClienterMockGetTopicPublic.RLock()
	calls = mock.calls.GetTopicPublic
	lockClienterMockGetTopicPublic.RUnlock()
	return calls
}

// Health calls HealthFunc.
func (mock *ClienterMock) Health() *health.Client {
	if mock.HealthFunc == nil {
		panic("ClienterMock.HealthFunc: method is nil but Clienter.Health was just called")
	}
	callInfo := struct {
	}{}
	lockClienterMockHealth.Lock()
	mock.calls.Health = append(mock.calls.Health, callInfo)
	lockClienterMockHealth.Unlock()
	return mock.HealthFunc()
}

// HealthCalls gets all the calls that were made to Health.
// Check the length with:
//     len(mockedClienter.HealthCalls())
func (mock *ClienterMock) HealthCalls() []struct {
} {
	var calls []struct {
	}
	lockClienterMockHealth.RLock()
	calls = mock.calls.Health
	lockClienterMockHealth.RUnlock()
	return calls
}

// PutTopicReleasePrivate calls PutTopicReleasePrivateFunc.
func (mock *ClienterMock) PutTopicReleasePrivate(ctx context.Context, reqHeaders sdk.Headers, id string, topicRelease []byte) (*sdk.ResponseInfo, errors.Error) {
	if mock.PutTopicReleasePrivateFunc == nil {
		panic("ClienterMock.PutTopicReleasePrivateFunc: method is nil but Clienter.PutTopicReleasePrivate was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		ReqHeaders   sdk.Headers
		ID           string
		TopicRelease []byte
	}{
		Ctx:          ctx,
		ReqHeaders:   reqHeaders,
		ID:           id,
		TopicRelease: topicRelease,
	}
	lockClienterMockPutTopicReleasePrivate.Lock()
	mock.calls.PutTopicReleasePrivate = append(mock.calls.PutTopicReleasePrivate, callInfo)
	lockClienterMockPutTopicReleasePrivate.Unlock()
	return mock.PutTopicReleasePrivateFunc(ctx, reqHeaders, id, topicRelease)
}

// PutTopicReleasePrivateCalls gets all the calls that were made to PutTopicReleasePrivate.
// Check the length with:
//     len(mockedClienter.PutTopicReleasePrivateCalls())
func (mock *ClienterMock) PutTopicReleasePrivateCalls() []struct {
	Ctx          context.Context
	ReqHeaders   sdk.Headers
	ID           string
	TopicRelease []byte
} {
	var calls []struct {
		Ctx          context.Context
		ReqHeaders   sdk.Headers
		ID           string
		TopicRelease []byte
	}
	lockClienterMockPutTopicReleasePrivate.RLock()
	calls = mock.calls.PutTopicReleasePrivate
	lockClienterMockPutTopicReleasePrivate.RUnlock()
	return calls
}

// URL calls URLFunc.
func (mock *ClienterMock) URL() string {
	if mock.URLFunc == nil {
		panic("ClienterMock.URLFunc: method is nil but Clienter.URL was just called")
	}
	callInfo := struct {
	}{}
	lockClienterMockURL.Lock()
	mock.calls.URL = append(mock.calls.URL, callInfo)
	lockClienterMockURL.Unlock()
	return mock.URLFunc()
}

// URLCalls gets all the calls that were made to URL.
// Check the length with:
//     len(mockedClienter.URLCalls())
func (mock *ClienterMock) URLCalls() []struct {
} {
	var calls []struct {
	}
	lockClienterMockURL.RLock()
	calls = mock.calls.URL
	lockClienterMockURL.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	healthcheck "github.com/ONSdigital/dp-api-clients-go/v2/health"
	health "github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/ONSdigital/dp-topic-api/models"
	"github.com/ONSdigital/dp-topic-api/sdk"
	apiError "github.com/ONSdigital/dp-topic-api/sdk/errors"
	"sync"
)

// Ensure, that ClienterMock does implement sdk.Clienter.
// If this is not the case, regenerate this file with moq.
var _ sdk.Clienter = &ClienterMock{}

// ClienterMock is a mock implementation of sdk.Clienter.
//
// 	func TestSomethingThatUsesClienter(t *testing.T) {
//
// 		// make and configure a mocked sdk.Clienter
// 		mockedClienter := &ClienterMock{
// 			CheckerFunc: func(ctx context.Context, check *health.CheckState) error {
// 				panic("mock out the Checker method")
// 			},
// 			GetNavigationPublicFunc: func(ctx context.Context, reqHeaders sdk.Headers, options sdk.Options) (*models.Navigation, apiError.Error) {
// 				panic("mock out the GetNavigationPublic method")
// 			},
// 			GetRootTopicsPrivateFunc: func(ctx context.Context, reqHeaders sdk.Headers) (*models.PrivateSubtopics, apiError.Error) {
// 				panic("mock out the GetRootTopicsPrivate method")
// 			},
// 			GetRootTopicsPublicFunc: func(ctx context.Context, reqHeaders sdk.Headers) (*models.PublicSubtopics, apiError.Error) {
// 				panic("mock out the GetRootTopicsPublic method")
// 			},
// 			GetSubtopicsPrivateFunc: func(ctx context.Context, reqHeaders sdk.Headers, id string) (*models.PrivateSubtopics, apiError.Error) {
// 				panic("mock out the GetSubtopicsPrivate method")
// 			},
// 			GetSubtopicsPublicFunc: func(ctx context.Context, reqHeaders sdk.Headers, id string) (*models.PublicSubtopics, apiError.Error) {
// 				panic("mock out the GetSubtopicsPublic method")
// 			},
// 			GetTopicPrivateFunc: func(ctx context.Context, reqHeaders sdk.Headers, id string) (*models.TopicResponse, apiError.Error) {
// 				panic("mock out the GetTopicPrivate method")
// 			},
// 			GetTopicPublicFunc: func(ctx context.Context, reqHeaders sdk.Headers, id string) (*models.Topic, apiError.Error) {
// 				panic("mock out the GetTopicPublic method")
// 			},
// 			HealthFunc: func() *healthcheck.Client {
// 				panic("mock out the Health method")
// 			},
// 			URLFunc: func() string {
// 				panic("mock out the URL method")
// 			},
// 		}
//
// 		// use mockedClienter in code that requires sdk.Clienter
// 		// and then make assertions.
//
// 	}
type ClienterMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, check *health.CheckState) error

	// GetNavigationPublicFunc mocks the GetNavigationPublic method.
	GetNavigationPublicFunc func(ctx context.Context, reqHeaders sdk.Headers, options sdk.Options) (*models.Navigation, apiError.Error)

	// GetRootTopicsPrivateFunc mocks the GetRootTopicsPrivate method.
	GetRootTopicsPrivateFunc func(ctx context.Context, reqHeaders sdk.Headers) (*models.PrivateSubtopics, apiError.Error)

	// GetRootTopicsPublicFunc mocks the GetRootTopicsPublic method.
	GetRootTopicsPublicFunc func(ctx context.Context, reqHeaders sdk.Headers) (*models.PublicSubtopics, apiError.Error)

	// GetSubtopicsPrivateFunc mocks the GetSubtopicsPrivate method.
	GetSubtopicsPrivateFunc func(ctx context.Context, reqHeaders sdk.Headers, id string) (*models.PrivateSubtopics, apiError.Error)

	// GetSubtopicsPublicFunc mocks the GetSubtopicsPublic method.
	GetSubtopicsPublicFunc func(ctx context.Context, reqHeaders sdk.Headers, id string) (*models.PublicSubtopics, apiError.Error)

	// GetTopicPrivateFunc mocks the GetTopicPrivate method.
	GetTopicPrivateFunc func(ctx context.Context, reqHeaders sdk.Headers, id string) (*models.TopicResponse, apiError.Error)

	// GetTopicPublicFunc mocks the GetTopicPublic method.
	GetTopicPublicFunc func(ctx context.Context, reqHeaders sdk.Headers, id string) (*models.Topic, apiError.Error)

	// HealthFunc mocks the Health method.
	HealthFunc func() *healthcheck.Client

	// URLFunc mocks the URL method.
	URLFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Check is the check argument value.
			Check *health.CheckState
		}
		// GetNavigationPublic holds details about calls to the GetNavigationPublic method.
		GetNavigationPublic []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReqHeaders is the reqHeaders argument value.
			ReqHeaders sdk.Headers
			// Options is the options argument value.
			Options sdk.Options
		}
		// GetRootTopicsPrivate holds details about calls to the GetRootTopicsPrivate method.
		GetRootTopicsPrivate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReqHeaders is the reqHeaders argument value.
			ReqHeaders sdk.Headers
		}
		// GetRootTopicsPublic holds details about calls to the GetRootTopicsPublic method.
		GetRootTopicsPublic []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReqHeaders is the reqHeaders argument value.
			ReqHeaders sdk.Headers
		}
		// GetSubtopicsPrivate holds details about calls to the GetSubtopicsPrivate method.
		GetSubtopicsPrivate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReqHeaders is the reqHeaders argument value.
			ReqHeaders sdk.Headers
			// ID is the id argument value.
			ID string
		}
		// GetSubtopicsPublic holds details about calls to the GetSubtopicsPublic method.
		GetSubtopicsPublic []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReqHeaders is the reqHeaders argument value.
			ReqHeaders sdk.Headers
			// ID is the id argument value.
			ID string
		}
		// GetTopicPrivate holds details about calls to the GetTopicPrivate method.
		GetTopicPrivate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReqHeaders is the reqHeaders argument value.
			ReqHeaders sdk.Headers
			// ID is the id argument value.
			ID string
		}
		// GetTopicPublic holds details about calls to the GetTopicPublic method.
		GetTopicPublic []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReqHeaders is the reqHeaders argument value.
			ReqHeaders sdk.Headers
			// ID is the id argument value.
			ID string
		}
		// Health holds details about calls to the Health method.
		Health []struct {
		}
		// URL holds details about calls to the URL method.
		URL []struct {
		}
	}
	lockChecker              sync.RWMutex
	lockGetNavigationPublic  sync.RWMutex
	lockGetRootTopicsPrivate sync.RWMutex
	lockGetRootTopicsPublic  sync.RWMutex
	lockGetSubtopicsPrivate  sync.RWMutex
	lockGetSubtopicsPublic   sync.RWMutex
	lockGetTopicPrivate      sync.RWMutex
	lockGetTopicPublic       sync.RWMutex
	lockHealth               sync.RWMutex
	lockURL                  sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *ClienterMock) Checker(ctx context.Context, check *health.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("ClienterMock.CheckerFunc: method is nil but Clienter.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Check *health.CheckState
	}{
		Ctx:   ctx,
		Check: check,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, check)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedClienter.CheckerCalls())
func (mock *ClienterMock) CheckerCalls() []struct {
	Ctx   context.Context
	Check *health.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		Check *health.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// GetNavigationPublic calls GetNavigationPublicFunc.
func (mock *ClienterMock) GetNavigationPublic(ctx context.Context, reqHeaders sdk.Headers, options sdk.Options) (*models.Navigation, apiError.Error) {
	if mock.GetNavigationPublicFunc == nil {
		panic("ClienterMock.GetNavigationPublicFunc: method is nil but Clienter.GetNavigationPublic was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ReqHeaders sdk.Headers
		Options    sdk.Options
	}{
		Ctx:        ctx,
		ReqHeaders: reqHeaders,
		Options:    options,
	}
	mock.lockGetNavigationPublic.Lock()
	mock.calls.GetNavigationPublic = append(mock.calls.GetNavigationPublic, callInfo)
	mock.lockGetNavigationPublic.Unlock()
	return mock.GetNavigationPublicFunc(ctx, reqHeaders, options)
}

// GetNavigationPublicCalls gets all the calls that were made to GetNavigationPublic.
// Check the length with:
//     len(mockedClienter.GetNavigationPublicCalls())
func (mock *ClienterMock) GetNavigationPublicCalls() []struct {
	Ctx        context.Context
	ReqHeaders sdk.Headers
	Options    sdk.Options
} {
	var calls []struct {
		Ctx        context.Context
		ReqHeaders sdk.Headers
		Options    sdk.Options
	}
	mock.lockGetNavigationPublic.RLock()
	calls = mock.calls.GetNavigationPublic
	mock.lockGetNavigationPublic.RUnlock()
	return calls
}

// GetRootTopicsPrivate calls GetRootTopicsPrivateFunc.
func (mock *ClienterMock) GetRootTopicsPrivate(ctx context.Context, reqHeaders sdk.Headers) (*models.PrivateSubtopics, apiError.Error) {
	if mock.GetRootTopicsPrivateFunc == nil {
		panic("ClienterMock.GetRootTopicsPrivateFunc: method is nil but Clienter.GetRootTopicsPrivate was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ReqHeaders sdk.Headers
	}{
		Ctx:        ctx,
		ReqHeaders: reqHeaders,
	}
	mock.lockGetRootTopicsPrivate.Lock()
	mock.calls.GetRootTopicsPrivate = append(mock.calls.GetRootTopicsPrivate, callInfo)
	mock.lockGetRootTopicsPrivate.Unlock()
	return mock.GetRootTopicsPrivateFunc(ctx, reqHeaders)
}

// GetRootTopicsPrivateCalls gets all the calls that were made to GetRootTopicsPrivate.
// Check the length with:
//     len(mockedClienter.GetRootTopicsPrivateCalls())
func (mock *ClienterMock) GetRootTopicsPrivateCalls() []struct {
	Ctx        context.Context
	ReqHeaders sdk.Headers
} {
	var calls []struct {
		Ctx        context.Context
		ReqHeaders sdk.Headers
	}
	mock.lockGetRootTopicsPrivate.RLock()
	calls = mock.calls.GetRootTopicsPrivate
	mock.lockGetRootTopicsPrivate.RUnlock()
	return calls
}

// GetRootTopicsPublic calls GetRootTopicsPublicFunc.
func (mock *ClienterMock) GetRootTopicsPublic(ctx context.Context, reqHeaders sdk.Headers) (*models.PublicSubtopics, apiError.Error) {
	if mock.GetRootTopicsPublicFunc == nil {
		panic("ClienterMock.GetRootTopicsPublicFunc: method is nil but Clienter.GetRootTopicsPublic was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ReqHeaders sdk.Headers
	}{
		Ctx:        ctx,
		ReqHeaders: reqHeaders,
	}
	mock.lockGetRootTopicsPublic.Lock()
	mock.calls.GetRootTopicsPublic = append(mock.calls.GetRootTopicsPublic, callInfo)
	mock.lockGetRootTopicsPublic.Unlock()
	return mock.GetRootTopicsPublicFunc(ctx, reqHeaders)
}

// GetRootTopicsPublicCalls gets all the calls that were made to GetRootTopicsPublic.
// Check the length with:
//     len(mockedClienter.GetRootTopicsPublicCalls())
func (mock *ClienterMock) GetRootTopicsPublicCalls() []struct {
	Ctx        context.Context
	ReqHeaders sdk.Headers
} {
	var calls []struct {
		Ctx        context.Context
		ReqHeaders sdk.Headers
	}
	mock.lockGetRootTopicsPublic.RLock()
	calls = mock.calls.GetRootTopicsPublic
	mock.lockGetRootTopicsPublic.RUnlock()
	return calls
}

// GetSubtopicsPrivate calls GetSubtopicsPrivateFunc.
func (mock *ClienterMock) GetSubtopicsPrivate(ctx context.Context, reqHeaders sdk.Headers, id string) (*models.PrivateSubtopics, apiError.Error) {
	if mock.GetSubtopicsPrivateFunc == nil {
		panic("ClienterMock.GetSubtopicsPrivateFunc: method is nil but Clienter.GetSubtopicsPrivate was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ReqHeaders sdk.Headers
		ID         string
	}{
		Ctx:        ctx,
		ReqHeaders: reqHeaders,
		ID:         id,
	}
	mock.lockGetSubtopicsPrivate.Lock()
	mock.calls.GetSubtopicsPrivate = append(mock.calls.GetSubtopicsPrivate, callInfo)
	mock.lockGetSubtopicsPrivate.Unlock()
	return mock.GetSubtopicsPrivateFunc(ctx, reqHeaders, id)
}

// GetSubtopicsPrivateCalls gets all the calls that were made to GetSubtopicsPrivate.
// Check the length with:
//     len(mockedClienter.GetSubtopicsPrivateCalls())
func (mock *ClienterMock) GetSubtopicsPrivateCalls() []struct {
	Ctx        context.Context
	ReqHeaders sdk.Headers
	ID         string
} {
	var calls []struct {
		Ctx        context.Context
		ReqHeaders sdk.Headers
		ID         string
	}
	mock.lockGetSubtopicsPrivate.RLock()
	calls = mock.calls.GetSubtopicsPrivate
	mock.lockGetSubtopicsPrivate.RUnlock()
	return calls
}

// GetSubtopicsPublic calls GetSubtopicsPublicFunc.
func (mock *ClienterMock) GetSubtopicsPublic(ctx context.Context, reqHeaders sdk.Headers, id string) (*models.PublicSubtopics, apiError.Error) {
	if mock.GetSubtopicsPublicFunc == nil {
		panic("ClienterMock.GetSubtopicsPublicFunc: method is nil but Clienter.GetSubtopicsPublic was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ReqHeaders sdk.Headers
		ID         string
	}{
		Ctx:        ctx,
		ReqHeaders: reqHeaders,
		ID:         id,
	}
	mock.lockGetSubtopicsPublic.Lock()
	mock.calls.GetSubtopicsPublic = append(mock.calls.GetSubtopicsPublic, callInfo)
	mock.lockGetSubtopicsPublic.Unlock()
	return mock.GetSubtopicsPublicFunc(ctx, reqHeaders, id)
}

// GetSubtopicsPublicCalls gets all the calls that were made to GetSubtopicsPublic.
// Check the length with:
//     len(mockedClienter.GetSubtopicsPublicCalls())
func (mock *ClienterMock) GetSubtopicsPublicCalls() []struct {
	Ctx        context.Context
	ReqHeaders sdk.Headers
	ID         string
} {
	var calls []struct {
		Ctx        context.Context
		ReqHeaders sdk.Headers
		ID         string
	}
	mock.lockGetSubtopicsPublic.RLock()
	calls = mock.calls.GetSubtopicsPublic
	mock.lockGetSubtopicsPublic.RUnlock()
	return calls
}

// GetTopicPrivate calls GetTopicPrivateFunc.
func (mock *ClienterMock) GetTopicPrivate(ctx context.Context, reqHeaders sdk.Headers, id string) (*models.TopicResponse, apiError.Error) {
	if mock.GetTopicPrivateFunc == nil {
		panic("ClienterMock.GetTopicPrivateFunc: method is nil but Clienter.GetTopicPrivate was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ReqHeaders sdk.Headers
		ID         string
	}{
		Ctx:        ctx,
		ReqHeaders: reqHeaders,
		ID:         id,
	}
	mock.lockGetTopicPrivate.Lock()
	mock.calls.GetTopicPrivate = append(mock.calls.GetTopicPrivate, callInfo)
	mock.lockGetTopicPrivate.Unlock()
	return mock.GetTopicPrivateFunc(ctx, reqHeaders, id)
}

// GetTopicPrivateCalls gets all the calls that were made to GetTopicPrivate.
// Check the length with:
//     len(mockedClienter.GetTopicPrivateCalls())
func (mock *ClienterMock) GetTopicPrivateCalls() []struct {
	Ctx        context.Context
	ReqHeaders sdk.Headers
	ID         string
} {
	var calls []struct {
		Ctx        context.Context
		ReqHeaders sdk.Headers
		ID         string
	}
	mock.lockGetTopicPrivate.RLock()
	calls = mock.calls.GetTopicPrivate
	mock.lockGetTopicPrivate.RUnlock()
	return calls
}

// GetTopicPublic calls GetTopicPublicFunc.
func (mock *ClienterMock) GetTopicPublic(ctx context.Context, reqHeaders sdk.Headers, id string) (*models.Topic, apiError.Error) {
	if mock.GetTopicPublicFunc == nil {
		panic("ClienterMock.GetTopicPublicFunc: method is nil but Clienter.GetTopicPublic was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ReqHeaders sdk.Headers
		ID         string
	}{
		Ctx:        ctx,
		ReqHeaders: reqHeaders,
		ID:         id,
	}
	mock.lockGetTopicPublic.Lock()
	mock.calls.GetTopicPublic = append(mock.calls.GetTopicPublic, callInfo)
	mock.lockGetTopicPublic.Unlock()
	return mock.GetTopicPublicFunc(ctx, reqHeaders, id)
}

// GetTopicPublicCalls gets all the calls that were made to GetTopicPublic.
// Check the length with:
//     len(mockedClienter.GetTopicPublicCalls())
func (mock *ClienterMock) GetTopicPublicCalls() []struct {
	Ctx        context.Context
	ReqHeaders sdk.Headers
	ID         string
} {
	var calls []struct {
		Ctx        context.Context
		ReqHeaders sdk.Headers
		ID         string
	}
	mock.lockGetTopicPublic.RLock()
	calls = mock.calls.GetTopicPublic
	mock.lockGetTopicPublic.RUnlock()
	return calls
}

// Health calls HealthFunc.
func (mock *ClienterMock) Health() *healthcheck.Client {
	if mock.HealthFunc == nil {
		panic("ClienterMock.HealthFunc: method is nil but Clienter.Health was just called")
	}
	callInfo := struct {
	}{}
	mock.lockHealth.Lock()
	mock.calls.Health = append(mock.calls.Health, callInfo)
	mock.lockHealth.Unlock()
	return mock.HealthFunc()
}

// HealthCalls gets all the calls that were made to Health.
// Check the length with:
//     len(mockedClienter.HealthCalls())
func (mock *ClienterMock) HealthCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHealth.RLock()
	calls = mock.calls.Health
	mock.lockHealth.RUnlock()
	return calls
}

// URL calls URLFunc.
func (mock *ClienterMock) URL() string {
	if mock.URLFunc == nil {
		panic("ClienterMock.URLFunc: method is nil but Clienter.URL was just called")
	}
	callInfo := struct {
	}{}
	mock.lockURL.Lock()
	mock.calls.URL = append(mock.calls.URL, callInfo)
	mock.lockURL.Unlock()
	return mock.URLFunc()
}

// URLCalls gets all the calls that were made to URL.
// Check the length with:
//     len(mockedClienter.URLCalls())
func (mock *ClienterMock) URLCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockURL.RLock()
	calls = mock.calls.URL
	mock.lockURL.RUnlock()
	return calls
}

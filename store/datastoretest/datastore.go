// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storetest

import (
	"context"
	"github.com/ONSdigital/dp-topic-api/models"
	"github.com/ONSdigital/dp-topic-api/store"
	"sync"
)

var (
	lockStorerMockCheckTopicExists  sync.RWMutex
	lockStorerMockGetContent        sync.RWMutex
	lockStorerMockGetTopic          sync.RWMutex
	lockStorerMockUpdateReleaseDate sync.RWMutex
)

// Ensure, that StorerMock does implement store.Storer.
// If this is not the case, regenerate this file with moq.
var _ store.Storer = &StorerMock{}

// StorerMock is a mock implementation of store.Storer.
//
//     func TestSomethingThatUsesStorer(t *testing.T) {
//
//         // make and configure a mocked store.Storer
//         mockedStorer := &StorerMock{
//             CheckTopicExistsFunc: func(ctx context.Context, id string) error {
// 	               panic("mock out the CheckTopicExists method")
//             },
//             GetContentFunc: func(ctx context.Context, id string, queryTypeFlags int) (*models.ContentResponse, error) {
// 	               panic("mock out the GetContent method")
//             },
//             GetTopicFunc: func(ctx context.Context, id string) (*models.TopicResponse, error) {
// 	               panic("mock out the GetTopic method")
//             },
//             UpdateReleaseDateFunc: func(ctx context.Context, id string, releaseDate string) error {
// 	               panic("mock out the UpdateReleaseDate method")
//             },
//         }
//
//         // use mockedStorer in code that requires store.Storer
//         // and then make assertions.
//
//     }
type StorerMock struct {
	// CheckTopicExistsFunc mocks the CheckTopicExists method.
	CheckTopicExistsFunc func(ctx context.Context, id string) error

	// GetContentFunc mocks the GetContent method.
	GetContentFunc func(ctx context.Context, id string, queryTypeFlags int) (*models.ContentResponse, error)

	// GetTopicFunc mocks the GetTopic method.
	GetTopicFunc func(ctx context.Context, id string) (*models.TopicResponse, error)

	// UpdateReleaseDateFunc mocks the UpdateReleaseDate method.
	UpdateReleaseDateFunc func(ctx context.Context, id string, releaseDate string) error

	// calls tracks calls to the methods.
	calls struct {
		// CheckTopicExists holds details about calls to the CheckTopicExists method.
		CheckTopicExists []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetContent holds details about calls to the GetContent method.
		GetContent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// QueryTypeFlags is the queryTypeFlags argument value.
			QueryTypeFlags int
		}
		// GetTopic holds details about calls to the GetTopic method.
		GetTopic []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// UpdateReleaseDate holds details about calls to the UpdateReleaseDate method.
		UpdateReleaseDate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// ReleaseDate is the releaseDate argument value.
			ReleaseDate string
		}
	}
}

// CheckTopicExists calls CheckTopicExistsFunc.
func (mock *StorerMock) CheckTopicExists(ctx context.Context, id string) error {
	if mock.CheckTopicExistsFunc == nil {
		panic("StorerMock.CheckTopicExistsFunc: method is nil but Storer.CheckTopicExists was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	lockStorerMockCheckTopicExists.Lock()
	mock.calls.CheckTopicExists = append(mock.calls.CheckTopicExists, callInfo)
	lockStorerMockCheckTopicExists.Unlock()
	return mock.CheckTopicExistsFunc(ctx, id)
}

// CheckTopicExistsCalls gets all the calls that were made to CheckTopicExists.
// Check the length with:
//     len(mockedStorer.CheckTopicExistsCalls())
func (mock *StorerMock) CheckTopicExistsCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	lockStorerMockCheckTopicExists.RLock()
	calls = mock.calls.CheckTopicExists
	lockStorerMockCheckTopicExists.RUnlock()
	return calls
}

// GetContent calls GetContentFunc.
func (mock *StorerMock) GetContent(ctx context.Context, id string, queryTypeFlags int) (*models.ContentResponse, error) {
	if mock.GetContentFunc == nil {
		panic("StorerMock.GetContentFunc: method is nil but Storer.GetContent was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		ID             string
		QueryTypeFlags int
	}{
		Ctx:            ctx,
		ID:             id,
		QueryTypeFlags: queryTypeFlags,
	}
	lockStorerMockGetContent.Lock()
	mock.calls.GetContent = append(mock.calls.GetContent, callInfo)
	lockStorerMockGetContent.Unlock()
	return mock.GetContentFunc(ctx, id, queryTypeFlags)
}

// GetContentCalls gets all the calls that were made to GetContent.
// Check the length with:
//     len(mockedStorer.GetContentCalls())
func (mock *StorerMock) GetContentCalls() []struct {
	Ctx            context.Context
	ID             string
	QueryTypeFlags int
} {
	var calls []struct {
		Ctx            context.Context
		ID             string
		QueryTypeFlags int
	}
	lockStorerMockGetContent.RLock()
	calls = mock.calls.GetContent
	lockStorerMockGetContent.RUnlock()
	return calls
}

// GetTopic calls GetTopicFunc.
func (mock *StorerMock) GetTopic(ctx context.Context, id string) (*models.TopicResponse, error) {
	if mock.GetTopicFunc == nil {
		panic("StorerMock.GetTopicFunc: method is nil but Storer.GetTopic was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	lockStorerMockGetTopic.Lock()
	mock.calls.GetTopic = append(mock.calls.GetTopic, callInfo)
	lockStorerMockGetTopic.Unlock()
	return mock.GetTopicFunc(ctx, id)
}

// GetTopicCalls gets all the calls that were made to GetTopic.
// Check the length with:
//     len(mockedStorer.GetTopicCalls())
func (mock *StorerMock) GetTopicCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	lockStorerMockGetTopic.RLock()
	calls = mock.calls.GetTopic
	lockStorerMockGetTopic.RUnlock()
	return calls
}

// UpdateReleaseDate calls UpdateReleaseDateFunc.
func (mock *StorerMock) UpdateReleaseDate(ctx context.Context, id string, releaseDate string) error {
	if mock.UpdateReleaseDateFunc == nil {
		panic("StorerMock.UpdateReleaseDateFunc: method is nil but Storer.UpdateReleaseDate was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ID          string
		ReleaseDate string
	}{
		Ctx:         ctx,
		ID:          id,
		ReleaseDate: releaseDate,
	}
	lockStorerMockUpdateReleaseDate.Lock()
	mock.calls.UpdateReleaseDate = append(mock.calls.UpdateReleaseDate, callInfo)
	lockStorerMockUpdateReleaseDate.Unlock()
	return mock.UpdateReleaseDateFunc(ctx, id, releaseDate)
}

// UpdateReleaseDateCalls gets all the calls that were made to UpdateReleaseDate.
// Check the length with:
//     len(mockedStorer.UpdateReleaseDateCalls())
func (mock *StorerMock) UpdateReleaseDateCalls() []struct {
	Ctx         context.Context
	ID          string
	ReleaseDate string
} {
	var calls []struct {
		Ctx         context.Context
		ID          string
		ReleaseDate string
	}
	lockStorerMockUpdateReleaseDate.RLock()
	calls = mock.calls.UpdateReleaseDate
	lockStorerMockUpdateReleaseDate.RUnlock()
	return calls
}

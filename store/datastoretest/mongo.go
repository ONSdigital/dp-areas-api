// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storetest

import (
	"context"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/ONSdigital/dp-topic-api/models"
	"github.com/ONSdigital/dp-topic-api/store"
	"sync"
)

// Ensure, that MongoDBMock does implement store.MongoDB.
// If this is not the case, regenerate this file with moq.
var _ store.MongoDB = &MongoDBMock{}

// MongoDBMock is a mock implementation of store.MongoDB.
//
//     func TestSomethingThatUsesMongoDB(t *testing.T) {
//
//         // make and configure a mocked store.MongoDB
//         mockedMongoDB := &MongoDBMock{
//             CheckTopicExistsFunc: func(id string) error {
// 	               panic("mock out the CheckTopicExists method")
//             },
//             CheckerFunc: func(in1 context.Context, in2 *healthcheck.CheckState) error {
// 	               panic("mock out the Checker method")
//             },
//             CloseFunc: func(in1 context.Context) error {
// 	               panic("mock out the Close method")
//             },
//             GetContentFunc: func(id string, queryTypeFlags int) (*models.ContentResponse, error) {
// 	               panic("mock out the GetContent method")
//             },
//             GetTopicFunc: func(id string) (*models.TopicResponse, error) {
// 	               panic("mock out the GetTopic method")
//             },
//         }
//
//         // use mockedMongoDB in code that requires store.MongoDB
//         // and then make assertions.
//
//     }
type MongoDBMock struct {
	// CheckTopicExistsFunc mocks the CheckTopicExists method.
	CheckTopicExistsFunc func(id string) error

	// CheckerFunc mocks the Checker method.
	CheckerFunc func(in1 context.Context, in2 *healthcheck.CheckState) error

	// CloseFunc mocks the Close method.
	CloseFunc func(in1 context.Context) error

	// GetContentFunc mocks the GetContent method.
	GetContentFunc func(id string, queryTypeFlags int) (*models.ContentResponse, error)

	// GetTopicFunc mocks the GetTopic method.
	GetTopicFunc func(id string) (*models.TopicResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// CheckTopicExists holds details about calls to the CheckTopicExists method.
		CheckTopicExists []struct {
			// ID is the id argument value.
			ID string
		}
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *healthcheck.CheckState
		}
		// Close holds details about calls to the Close method.
		Close []struct {
			// In1 is the in1 argument value.
			In1 context.Context
		}
		// GetContent holds details about calls to the GetContent method.
		GetContent []struct {
			// ID is the id argument value.
			ID string
			// QueryTypeFlags is the queryTypeFlags argument value.
			QueryTypeFlags int
		}
		// GetTopic holds details about calls to the GetTopic method.
		GetTopic []struct {
			// ID is the id argument value.
			ID string
		}
	}
	lockCheckTopicExists sync.RWMutex
	lockChecker          sync.RWMutex
	lockClose            sync.RWMutex
	lockGetContent       sync.RWMutex
	lockGetTopic         sync.RWMutex
}

// CheckTopicExists calls CheckTopicExistsFunc.
func (mock *MongoDBMock) CheckTopicExists(id string) error {
	if mock.CheckTopicExistsFunc == nil {
		panic("MongoDBMock.CheckTopicExistsFunc: method is nil but MongoDB.CheckTopicExists was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockCheckTopicExists.Lock()
	mock.calls.CheckTopicExists = append(mock.calls.CheckTopicExists, callInfo)
	mock.lockCheckTopicExists.Unlock()
	return mock.CheckTopicExistsFunc(id)
}

// CheckTopicExistsCalls gets all the calls that were made to CheckTopicExists.
// Check the length with:
//     len(mockedMongoDB.CheckTopicExistsCalls())
func (mock *MongoDBMock) CheckTopicExistsCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockCheckTopicExists.RLock()
	calls = mock.calls.CheckTopicExists
	mock.lockCheckTopicExists.RUnlock()
	return calls
}

// Checker calls CheckerFunc.
func (mock *MongoDBMock) Checker(in1 context.Context, in2 *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("MongoDBMock.CheckerFunc: method is nil but MongoDB.Checker was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *healthcheck.CheckState
	}{
		In1: in1,
		In2: in2,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(in1, in2)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedMongoDB.CheckerCalls())
func (mock *MongoDBMock) CheckerCalls() []struct {
	In1 context.Context
	In2 *healthcheck.CheckState
} {
	var calls []struct {
		In1 context.Context
		In2 *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *MongoDBMock) Close(in1 context.Context) error {
	if mock.CloseFunc == nil {
		panic("MongoDBMock.CloseFunc: method is nil but MongoDB.Close was just called")
	}
	callInfo := struct {
		In1 context.Context
	}{
		In1: in1,
	}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc(in1)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedMongoDB.CloseCalls())
func (mock *MongoDBMock) CloseCalls() []struct {
	In1 context.Context
} {
	var calls []struct {
		In1 context.Context
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// GetContent calls GetContentFunc.
func (mock *MongoDBMock) GetContent(id string, queryTypeFlags int) (*models.ContentResponse, error) {
	if mock.GetContentFunc == nil {
		panic("MongoDBMock.GetContentFunc: method is nil but MongoDB.GetContent was just called")
	}
	callInfo := struct {
		ID             string
		QueryTypeFlags int
	}{
		ID:             id,
		QueryTypeFlags: queryTypeFlags,
	}
	mock.lockGetContent.Lock()
	mock.calls.GetContent = append(mock.calls.GetContent, callInfo)
	mock.lockGetContent.Unlock()
	return mock.GetContentFunc(id, queryTypeFlags)
}

// GetContentCalls gets all the calls that were made to GetContent.
// Check the length with:
//     len(mockedMongoDB.GetContentCalls())
func (mock *MongoDBMock) GetContentCalls() []struct {
	ID             string
	QueryTypeFlags int
} {
	var calls []struct {
		ID             string
		QueryTypeFlags int
	}
	mock.lockGetContent.RLock()
	calls = mock.calls.GetContent
	mock.lockGetContent.RUnlock()
	return calls
}

// GetTopic calls GetTopicFunc.
func (mock *MongoDBMock) GetTopic(id string) (*models.TopicResponse, error) {
	if mock.GetTopicFunc == nil {
		panic("MongoDBMock.GetTopicFunc: method is nil but MongoDB.GetTopic was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockGetTopic.Lock()
	mock.calls.GetTopic = append(mock.calls.GetTopic, callInfo)
	mock.lockGetTopic.Unlock()
	return mock.GetTopicFunc(id)
}

// GetTopicCalls gets all the calls that were made to GetTopic.
// Check the length with:
//     len(mockedMongoDB.GetTopicCalls())
func (mock *MongoDBMock) GetTopicCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockGetTopic.RLock()
	calls = mock.calls.GetTopic
	mock.lockGetTopic.RUnlock()
	return calls
}

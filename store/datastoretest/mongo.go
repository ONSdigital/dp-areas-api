// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storetest

import (
	"context"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/ONSdigital/dp-topic-api/models"
	"github.com/ONSdigital/dp-topic-api/store"
	"sync"
	"time"
)

var (
	lockMongoDBMockCheckTopicExists  sync.RWMutex
	lockMongoDBMockChecker           sync.RWMutex
	lockMongoDBMockClose             sync.RWMutex
	lockMongoDBMockGetContent        sync.RWMutex
	lockMongoDBMockGetTopic          sync.RWMutex
	lockMongoDBMockUpdateReleaseDate sync.RWMutex
	lockMongoDBMockUpdateState       sync.RWMutex
	lockMongoDBMockUpdateTopic       sync.RWMutex
)

// Ensure, that MongoDBMock does implement store.MongoDB.
// If this is not the case, regenerate this file with moq.
var _ store.MongoDB = &MongoDBMock{}

// MongoDBMock is a mock implementation of store.MongoDB.
//
//     func TestSomethingThatUsesMongoDB(t *testing.T) {
//
//         // make and configure a mocked store.MongoDB
//         mockedMongoDB := &MongoDBMock{
//             CheckTopicExistsFunc: func(ctx context.Context, id string) error {
// 	               panic("mock out the CheckTopicExists method")
//             },
//             CheckerFunc: func(in1 context.Context, in2 *healthcheck.CheckState) error {
// 	               panic("mock out the Checker method")
//             },
//             CloseFunc: func(in1 context.Context) error {
// 	               panic("mock out the Close method")
//             },
//             GetContentFunc: func(ctx context.Context, id string, queryTypeFlags int) (*models.ContentResponse, error) {
// 	               panic("mock out the GetContent method")
//             },
//             GetTopicFunc: func(ctx context.Context, id string) (*models.TopicResponse, error) {
// 	               panic("mock out the GetTopic method")
//             },
//             UpdateReleaseDateFunc: func(ctx context.Context, id string, releaseDate time.Time) error {
// 	               panic("mock out the UpdateReleaseDate method")
//             },
//             UpdateStateFunc: func(ctx context.Context, id string, state string) error {
// 	               panic("mock out the UpdateState method")
//             },
//             UpdateTopicFunc: func(ctx context.Context, id string, topic *models.TopicResponse) error {
// 	               panic("mock out the UpdateTopic method")
//             },
//         }
//
//         // use mockedMongoDB in code that requires store.MongoDB
//         // and then make assertions.
//
//     }
type MongoDBMock struct {
	// CheckTopicExistsFunc mocks the CheckTopicExists method.
	CheckTopicExistsFunc func(ctx context.Context, id string) error

	// CheckerFunc mocks the Checker method.
	CheckerFunc func(in1 context.Context, in2 *healthcheck.CheckState) error

	// CloseFunc mocks the Close method.
	CloseFunc func(in1 context.Context) error

	// GetContentFunc mocks the GetContent method.
	GetContentFunc func(ctx context.Context, id string, queryTypeFlags int) (*models.ContentResponse, error)

	// GetTopicFunc mocks the GetTopic method.
	GetTopicFunc func(ctx context.Context, id string) (*models.TopicResponse, error)

	// UpdateReleaseDateFunc mocks the UpdateReleaseDate method.
	UpdateReleaseDateFunc func(ctx context.Context, id string, releaseDate time.Time) error

	// UpdateStateFunc mocks the UpdateState method.
	UpdateStateFunc func(ctx context.Context, id string, state string) error

	// UpdateTopicFunc mocks the UpdateTopic method.
	UpdateTopicFunc func(ctx context.Context, id string, topic *models.TopicResponse) error

	// calls tracks calls to the methods.
	calls struct {
		// CheckTopicExists holds details about calls to the CheckTopicExists method.
		CheckTopicExists []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *healthcheck.CheckState
		}
		// Close holds details about calls to the Close method.
		Close []struct {
			// In1 is the in1 argument value.
			In1 context.Context
		}
		// GetContent holds details about calls to the GetContent method.
		GetContent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// QueryTypeFlags is the queryTypeFlags argument value.
			QueryTypeFlags int
		}
		// GetTopic holds details about calls to the GetTopic method.
		GetTopic []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// UpdateReleaseDate holds details about calls to the UpdateReleaseDate method.
		UpdateReleaseDate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// ReleaseDate is the releaseDate argument value.
			ReleaseDate time.Time
		}
		// UpdateState holds details about calls to the UpdateState method.
		UpdateState []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// State is the state argument value.
			State string
		}
		// UpdateTopic holds details about calls to the UpdateTopic method.
		UpdateTopic []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Topic is the topic argument value.
			Topic *models.TopicResponse
		}
	}
}

// CheckTopicExists calls CheckTopicExistsFunc.
func (mock *MongoDBMock) CheckTopicExists(ctx context.Context, id string) error {
	if mock.CheckTopicExistsFunc == nil {
		panic("MongoDBMock.CheckTopicExistsFunc: method is nil but MongoDB.CheckTopicExists was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	lockMongoDBMockCheckTopicExists.Lock()
	mock.calls.CheckTopicExists = append(mock.calls.CheckTopicExists, callInfo)
	lockMongoDBMockCheckTopicExists.Unlock()
	return mock.CheckTopicExistsFunc(ctx, id)
}

// CheckTopicExistsCalls gets all the calls that were made to CheckTopicExists.
// Check the length with:
//     len(mockedMongoDB.CheckTopicExistsCalls())
func (mock *MongoDBMock) CheckTopicExistsCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	lockMongoDBMockCheckTopicExists.RLock()
	calls = mock.calls.CheckTopicExists
	lockMongoDBMockCheckTopicExists.RUnlock()
	return calls
}

// Checker calls CheckerFunc.
func (mock *MongoDBMock) Checker(in1 context.Context, in2 *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("MongoDBMock.CheckerFunc: method is nil but MongoDB.Checker was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *healthcheck.CheckState
	}{
		In1: in1,
		In2: in2,
	}
	lockMongoDBMockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	lockMongoDBMockChecker.Unlock()
	return mock.CheckerFunc(in1, in2)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedMongoDB.CheckerCalls())
func (mock *MongoDBMock) CheckerCalls() []struct {
	In1 context.Context
	In2 *healthcheck.CheckState
} {
	var calls []struct {
		In1 context.Context
		In2 *healthcheck.CheckState
	}
	lockMongoDBMockChecker.RLock()
	calls = mock.calls.Checker
	lockMongoDBMockChecker.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *MongoDBMock) Close(in1 context.Context) error {
	if mock.CloseFunc == nil {
		panic("MongoDBMock.CloseFunc: method is nil but MongoDB.Close was just called")
	}
	callInfo := struct {
		In1 context.Context
	}{
		In1: in1,
	}
	lockMongoDBMockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	lockMongoDBMockClose.Unlock()
	return mock.CloseFunc(in1)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedMongoDB.CloseCalls())
func (mock *MongoDBMock) CloseCalls() []struct {
	In1 context.Context
} {
	var calls []struct {
		In1 context.Context
	}
	lockMongoDBMockClose.RLock()
	calls = mock.calls.Close
	lockMongoDBMockClose.RUnlock()
	return calls
}

// GetContent calls GetContentFunc.
func (mock *MongoDBMock) GetContent(ctx context.Context, id string, queryTypeFlags int) (*models.ContentResponse, error) {
	if mock.GetContentFunc == nil {
		panic("MongoDBMock.GetContentFunc: method is nil but MongoDB.GetContent was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		ID             string
		QueryTypeFlags int
	}{
		Ctx:            ctx,
		ID:             id,
		QueryTypeFlags: queryTypeFlags,
	}
	lockMongoDBMockGetContent.Lock()
	mock.calls.GetContent = append(mock.calls.GetContent, callInfo)
	lockMongoDBMockGetContent.Unlock()
	return mock.GetContentFunc(ctx, id, queryTypeFlags)
}

// GetContentCalls gets all the calls that were made to GetContent.
// Check the length with:
//     len(mockedMongoDB.GetContentCalls())
func (mock *MongoDBMock) GetContentCalls() []struct {
	Ctx            context.Context
	ID             string
	QueryTypeFlags int
} {
	var calls []struct {
		Ctx            context.Context
		ID             string
		QueryTypeFlags int
	}
	lockMongoDBMockGetContent.RLock()
	calls = mock.calls.GetContent
	lockMongoDBMockGetContent.RUnlock()
	return calls
}

// GetTopic calls GetTopicFunc.
func (mock *MongoDBMock) GetTopic(ctx context.Context, id string) (*models.TopicResponse, error) {
	if mock.GetTopicFunc == nil {
		panic("MongoDBMock.GetTopicFunc: method is nil but MongoDB.GetTopic was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	lockMongoDBMockGetTopic.Lock()
	mock.calls.GetTopic = append(mock.calls.GetTopic, callInfo)
	lockMongoDBMockGetTopic.Unlock()
	return mock.GetTopicFunc(ctx, id)
}

// GetTopicCalls gets all the calls that were made to GetTopic.
// Check the length with:
//     len(mockedMongoDB.GetTopicCalls())
func (mock *MongoDBMock) GetTopicCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	lockMongoDBMockGetTopic.RLock()
	calls = mock.calls.GetTopic
	lockMongoDBMockGetTopic.RUnlock()
	return calls
}

// UpdateReleaseDate calls UpdateReleaseDateFunc.
func (mock *MongoDBMock) UpdateReleaseDate(ctx context.Context, id string, releaseDate time.Time) error {
	if mock.UpdateReleaseDateFunc == nil {
		panic("MongoDBMock.UpdateReleaseDateFunc: method is nil but MongoDB.UpdateReleaseDate was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ID          string
		ReleaseDate time.Time
	}{
		Ctx:         ctx,
		ID:          id,
		ReleaseDate: releaseDate,
	}
	lockMongoDBMockUpdateReleaseDate.Lock()
	mock.calls.UpdateReleaseDate = append(mock.calls.UpdateReleaseDate, callInfo)
	lockMongoDBMockUpdateReleaseDate.Unlock()
	return mock.UpdateReleaseDateFunc(ctx, id, releaseDate)
}

// UpdateReleaseDateCalls gets all the calls that were made to UpdateReleaseDate.
// Check the length with:
//     len(mockedMongoDB.UpdateReleaseDateCalls())
func (mock *MongoDBMock) UpdateReleaseDateCalls() []struct {
	Ctx         context.Context
	ID          string
	ReleaseDate time.Time
} {
	var calls []struct {
		Ctx         context.Context
		ID          string
		ReleaseDate time.Time
	}
	lockMongoDBMockUpdateReleaseDate.RLock()
	calls = mock.calls.UpdateReleaseDate
	lockMongoDBMockUpdateReleaseDate.RUnlock()
	return calls
}

// UpdateState calls UpdateStateFunc.
func (mock *MongoDBMock) UpdateState(ctx context.Context, id string, state string) error {
	if mock.UpdateStateFunc == nil {
		panic("MongoDBMock.UpdateStateFunc: method is nil but MongoDB.UpdateState was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		ID    string
		State string
	}{
		Ctx:   ctx,
		ID:    id,
		State: state,
	}
	lockMongoDBMockUpdateState.Lock()
	mock.calls.UpdateState = append(mock.calls.UpdateState, callInfo)
	lockMongoDBMockUpdateState.Unlock()
	return mock.UpdateStateFunc(ctx, id, state)
}

// UpdateStateCalls gets all the calls that were made to UpdateState.
// Check the length with:
//     len(mockedMongoDB.UpdateStateCalls())
func (mock *MongoDBMock) UpdateStateCalls() []struct {
	Ctx   context.Context
	ID    string
	State string
} {
	var calls []struct {
		Ctx   context.Context
		ID    string
		State string
	}
	lockMongoDBMockUpdateState.RLock()
	calls = mock.calls.UpdateState
	lockMongoDBMockUpdateState.RUnlock()
	return calls
}

// UpdateTopic calls UpdateTopicFunc.
func (mock *MongoDBMock) UpdateTopic(ctx context.Context, id string, topic *models.TopicResponse) error {
	if mock.UpdateTopicFunc == nil {
		panic("MongoDBMock.UpdateTopicFunc: method is nil but MongoDB.UpdateTopic was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		ID    string
		Topic *models.TopicResponse
	}{
		Ctx:   ctx,
		ID:    id,
		Topic: topic,
	}
	lockMongoDBMockUpdateTopic.Lock()
	mock.calls.UpdateTopic = append(mock.calls.UpdateTopic, callInfo)
	lockMongoDBMockUpdateTopic.Unlock()
	return mock.UpdateTopicFunc(ctx, id, topic)
}

// UpdateTopicCalls gets all the calls that were made to UpdateTopic.
// Check the length with:
//     len(mockedMongoDB.UpdateTopicCalls())
func (mock *MongoDBMock) UpdateTopicCalls() []struct {
	Ctx   context.Context
	ID    string
	Topic *models.TopicResponse
} {
	var calls []struct {
		Ctx   context.Context
		ID    string
		Topic *models.TopicResponse
	}
	lockMongoDBMockUpdateTopic.RLock()
	calls = mock.calls.UpdateTopic
	lockMongoDBMockUpdateTopic.RUnlock()
	return calls
}
